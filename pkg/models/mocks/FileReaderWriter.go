// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/stashapp/stash/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// FileReaderWriter is an autogenerated mock type for the FileReaderWriter type
type FileReaderWriter struct {
	mock.Mock
}

// Create provides a mock function with given fields: newFile
func (_m *FileReaderWriter) Create(newFile models.File) (*models.File, error) {
	ret := _m.Called(newFile)

	var r0 *models.File
	if rf, ok := ret.Get(0).(func(models.File) *models.File); ok {
		r0 = rf(newFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.File) error); ok {
		r1 = rf(newFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields: id
func (_m *FileReaderWriter) Destroy(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ids
func (_m *FileReaderWriter) Find(ids []int) ([]*models.File, error) {
	ret := _m.Called(ids)

	var r0 []*models.File
	if rf, ok := ret.Get(0).(func([]int) []*models.File); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByChecksum provides a mock function with given fields: checksum
func (_m *FileReaderWriter) FindByChecksum(checksum string) ([]*models.File, error) {
	ret := _m.Called(checksum)

	var r0 []*models.File
	if rf, ok := ret.Get(0).(func(string) []*models.File); ok {
		r0 = rf(checksum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checksum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOSHash provides a mock function with given fields: oshash
func (_m *FileReaderWriter) FindByOSHash(oshash string) ([]*models.File, error) {
	ret := _m.Called(oshash)

	var r0 []*models.File
	if rf, ok := ret.Get(0).(func(string) []*models.File); ok {
		r0 = rf(oshash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(oshash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPath provides a mock function with given fields: path
func (_m *FileReaderWriter) FindByPath(path string) (*models.File, error) {
	ret := _m.Called(path)

	var r0 *models.File
	if rf, ok := ret.Get(0).(func(string) *models.File); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFull provides a mock function with given fields: updatedFile
func (_m *FileReaderWriter) UpdateFull(updatedFile models.File) (*models.File, error) {
	ret := _m.Called(updatedFile)

	var r0 *models.File
	if rf, ok := ret.Get(0).(func(models.File) *models.File); ok {
		r0 = rf(updatedFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.File) error); ok {
		r1 = rf(updatedFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
