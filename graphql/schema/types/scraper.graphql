enum ScrapeType {
  """From text query""" 
  NAME
  """From existing object"""
  FRAGMENT
  """From URL"""
  URL
}

type ScraperSpec {
    """URLs matching these can be scraped with"""
    urls: [String!]
    supported_scrapes: [ScrapeType!]!
}

type Scraper {
    id: ID!
    name: String!
    """Details for performer scraper"""
    performer: ScraperSpec
    """Details for scene scraper"""
    scene: ScraperSpec
    """Details for gallery scraper"""
    gallery: ScraperSpec
    """Details for movie scraper"""
    movie: ScraperSpec
}

type ScrapedScenePerformer {
  """Set if performer matched"""
  stored_id: ID
  name: String!
  gender: String
  url: String
  twitter: String
  instagram: String
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
  tags: [ScrapedSceneTag!]

  remote_site_id: String
  images: [String!]
  details: String
  death_date: String
  hair_color: String
  weight: String
}

type ScrapedSceneMovie {
  """Set if movie matched"""
  stored_id: ID
  name: String!
  aliases: String
  duration: String
  date: String
  rating: String
  director: String
  synopsis: String
  url: String
}

type ScrapedSceneStudio {
  """Set if studio matched"""
  stored_id: ID
  name: String!
  url: String

  remote_site_id: String
}

type ScrapedSceneTag {
  """Set if tag matched"""
  stored_id: ID
  name: String!
}

type ScrapedScene {
  title: String
  details: String
  url: String
  date: String

  """This should be a base64 encoded data URL"""
  image: String

  file: SceneFileType # Resolver

  studio: ScrapedSceneStudio
  tags: [ScrapedSceneTag!]
  performers: [ScrapedScenePerformer!]
  movies: [ScrapedSceneMovie!]

  remote_site_id: String
  duration: Int
  fingerprints: [StashBoxFingerprint!]
}

type ScrapedGallery {
  title: String
  details: String
  url: String
  date: String

  studio: ScrapedSceneStudio
  tags: [ScrapedSceneTag!]
  performers: [ScrapedScenePerformer!]
}

input StashBoxSceneQueryInput {
  """Index of the configured stash-box instance to use"""
  stash_box_index: Int!
  """Instructs query by scene fingerprints"""
  scene_ids: [ID!]
  """Query by query string"""
  q: String
}

input StashBoxPerformerQueryInput {
  """Index of the configured stash-box instance to use"""
  stash_box_index: Int!
  """Instructs query by scene fingerprints"""
  performer_ids: [ID!]
  """Query by query string"""
  q: String
}

type StashBoxPerformerQueryResult {
  query: String!
  results: [ScrapedScenePerformer!]!
}

type StashBoxFingerprint {
  algorithm: String!
  hash: String!
  duration: Int!
}

input StashBoxBatchPerformerTagInput {
  endpoint: Int!
  exclude_fields: [String!]
  refresh: Boolean!
  performer_ids: [ID!]
  performer_names: [String!]
}
